name: Release and Deploy

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/zenbilling

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          "api_gateway",
          "auth_service", 
          "company_service",
          "customer_service",
          "dashboard_service",
          "email_service",
          "invoice_service",
          "pdf_service",
          "product_service",
          "quote_service",
          "stripe_service",
          "ai_service"
        ]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          "api_gateway",
          "auth_service", 
          "company_service",
          "customer_service",
          "dashboard_service",
          "email_service",
          "invoice_service",
          "pdf_service",
          "product_service",
          "quote_service",
          "stripe_service",
          "ai_service"
        ]
      fail-fast: false

    steps:
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Deploy to Coolify Production
        env:
          COOLIFY_TOKEN: ${{ secrets.COOLIFY_PROD_TOKEN }}
          COOLIFY_URL: ${{ secrets.COOLIFY_PROD_URL }}
          SERVICE_NAME: zenbilling-${{ matrix.service }}-prod
        run: |
          echo "🚀 Déploiement de ${{ matrix.service }} en production - Version ${{ steps.version.outputs.version }}"
          curl -X POST \
            -H "Authorization: Bearer $COOLIFY_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ steps.version.outputs.version }}",
              "force": true
            }' \
            "$COOLIFY_URL/api/v1/applications/$SERVICE_NAME/deploy"

  create-release:
    needs: deploy-production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Release ${{ steps.version.outputs.version }}
            
            🚀 **Déployé en production**
            
            ### Services déployés
            - api_gateway
            - auth_service
            - company_service
            - customer_service
            - dashboard_service
            - email_service
            - invoice_service
            - pdf_service
            - product_service
            - quote_service
            - stripe_service
            - ai_service
            
            ### Images Docker
            Images disponibles dans GitHub Container Registry avec le tag `${{ steps.version.outputs.version }}`
          draft: false
          prerelease: false

  notify-success:
    needs: [build-and-push, deploy-production]
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Notify success
        run: |
          echo "🎉 Release ${{ steps.version.outputs.version }} déployée avec succès en production!"