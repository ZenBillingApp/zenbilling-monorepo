name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      force_deploy_all:
        description: 'Force deployment of all services'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      shared-changed: ${{ steps.changes.outputs.shared-changed }}
      force-all: ${{ steps.force-check.outputs.force-all }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check force deployment
        id: force-check
        run: |
          if [[ "${{ github.event.inputs.force_deploy_all }}" == "true" ]]; then
            echo "force-all=true" >> $GITHUB_OUTPUT
          else
            echo "force-all=false" >> $GITHUB_OUTPUT
          fi

      - name: Detect changed services
        id: changes
        run: |
          # Liste de tous les services
          ALL_SERVICES="api_gateway auth_service company_service stripe_service dashboard_service invoice_service quote_service email_service product_service customer_service pdf_service ai_service"

          if [[ "${{ steps.force-check.outputs.force-all }}" == "true" ]]; then
            echo "Force deployment requested - deploying all services"
            CHANGED_SERVICES="$ALL_SERVICES"
            SHARED_CHANGED="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For manual dispatch without force, still check for changes
            if git diff --name-only HEAD~1 | grep -q "^packages/shared/"; then
              echo "Shared package changed - deploying all services"
              CHANGED_SERVICES="$ALL_SERVICES"
              SHARED_CHANGED="true"
            else
              CHANGED_SERVICES=""
              for service in $ALL_SERVICES; do
                if git diff --name-only HEAD~1 | grep -q "^packages/$service/"; then
                  CHANGED_SERVICES="$CHANGED_SERVICES $service"
                fi
              done
              SHARED_CHANGED="false"
            fi
          else
            # For push/PR events, compare with base
            BASE_SHA="${{ github.event.before }}"
            if [[ "$BASE_SHA" == "0000000000000000000000000000000000000000" ]]; then
              # First push to branch, compare with main
              BASE_SHA="origin/main"
            fi

            if git diff --name-only $BASE_SHA...HEAD | grep -q "^packages/shared/"; then
              echo "Shared package changed - deploying all services"
              CHANGED_SERVICES="$ALL_SERVICES"
              SHARED_CHANGED="true"
            else
              CHANGED_SERVICES=""
              for service in $ALL_SERVICES; do
                if git diff --name-only $BASE_SHA...HEAD | grep -q "^packages/$service/"; then
                  CHANGED_SERVICES="$CHANGED_SERVICES $service"
                fi
              done
              SHARED_CHANGED="false"
            fi
          fi

          # Convert to JSON array
          if [[ -n "$CHANGED_SERVICES" ]]; then
            SERVICES_JSON=$(echo $CHANGED_SERVICES | tr ' ' '\n' | jq -R . | jq -s .)
          else
            SERVICES_JSON="[]"
          fi

          echo "services=$SERVICES_JSON" >> $GITHUB_OUTPUT
          echo "shared-changed=$SHARED_CHANGED" >> $GITHUB_OUTPUT

          echo "Changed services: $CHANGED_SERVICES"
          echo "Services JSON: $SERVICES_JSON"

  build-shared:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.shared-changed == 'true' || fromJSON(needs.detect-changes.outputs.services)[0] != null
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: |
          cd packages/shared
          npm run prisma:generate
          npm run build

      - name: Cache shared build
        uses: actions/cache@v3
        with:
          path: |
            packages/shared/dist
            packages/shared/node_modules/.prisma
          key: shared-build-${{ github.sha }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-shared]
    if: fromJSON(needs.detect-changes.outputs.services)[0] != null
    strategy:
      matrix:
        service: ${{ fromJSON(needs.detect-changes.outputs.services) }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Restore shared build cache
        uses: actions/cache@v3
        with:
          path: |
            packages/shared/dist
            packages/shared/node_modules/.prisma
          key: shared-build-${{ github.sha }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/zenbilling-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/${{ matrix.service }}/Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/zenbilling-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.service }}.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results-${{ matrix.service }}.sarif'

  deploy-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, build-and-push]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.detect-changes.outputs.force-all }}" == "true" ]]; then
            echo "✅ **Force deployment**: All services deployed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.detect-changes.outputs.shared-changed }}" == "true" ]]; then
            echo "✅ **Shared package changed**: All services rebuilt and deployed" >> $GITHUB_STEP_SUMMARY
          else
            services="${{ needs.detect-changes.outputs.services }}"
            if [[ "$services" != "[]" ]]; then
              echo "✅ **Services deployed**: $(echo '${{ needs.detect-changes.outputs.services }}' | jq -r '.[]' | tr '\n' ' ')" >> $GITHUB_STEP_SUMMARY
            else
              echo "ℹ️ **No changes detected**: No services deployed" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📦 **Docker Images**: Available on Docker Hub with tags:" >> $GITHUB_STEP_SUMMARY
          echo "- \`latest\` (main branch)" >> $GITHUB_STEP_SUMMARY
          echo "- \`develop\` (develop branch)" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ github.ref_name }}-${{ github.sha }}\` (this build)" >> $GITHUB_STEP_SUMMARY
          echo "🖥️ **Platform**: linux/amd64 (optimized for Coolify self-hosted)" >> $GITHUB_STEP_SUMMARY