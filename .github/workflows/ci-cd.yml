name: CI/CD ZenBilling

on:
    push:
        branches: [main]
    pull_request:

env:
    NODE_VERSION: 20
    REGISTRY: ${{ secrets.DOCKER_USERNAME }}

jobs:
    install:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build shared
              run: npx lerna run build --scope @shared --stream

    build:
        needs: install
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service:
                    [
                        ai_service,
                        api_gateway,
                        auth_service,
                        company_service,
                        customer_service,
                        dashboard_service,
                        email_service,
                        invoice_service,
                        pdf_service,
                        product_service,
                        quote_service,
                        stripe_service,
                    ]
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build service
              run: npx lerna run build --scope @${{ matrix.service }} --stream

            - name: Run tests
              run: npx lerna run test --scope @${{ matrix.service }} --stream

    docker:
        needs: build
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service:
                    [
                        ai_service,
                        api_gateway,
                        auth_service,
                        company_service,
                        customer_service,
                        dashboard_service,
                        email_service,
                        invoice_service,
                        pdf_service,
                        product_service,
                        quote_service,
                        stripe_service,
                    ]
        steps:
            - uses: actions/checkout@v4

            - name: Login to DockerHub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and Push Docker Image
              run: |
                  docker build -t ${{ env.REGISTRY }}/${{ matrix.service }}:latest ./packages/${{ matrix.service }}
                  docker push ${{ env.REGISTRY }}/${{ matrix.service }}:latest

    deploy:
        needs: docker
        runs-on: ubuntu-latest
        strategy:
            matrix:
                service:
                    [
                        ai_service,
                        api_gateway,
                        auth_service,
                        company_service,
                        customer_service,
                        dashboard_service,
                        email_service,
                        invoice_service,
                        pdf_service,
                        product_service,
                        quote_service,
                        stripe_service,
                    ]
        steps:
            - name: Deploy via Coolify Webhook
              env:
                  AI_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_AI_SERVICE }}
                  API_GATEWAY_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_API_GATEWAY }}
                  AUTH_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_AUTH_SERVICE }}
                  COMPANY_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_COMPANY_SERVICE }}
                  CUSTOMER_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_CUSTOMER_SERVICE }}
                  DASHBOARD_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_DASHBOARD_SERVICE }}
                  EMAIL_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_EMAIL_SERVICE }}
                  INVOICE_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_INVOICE_SERVICE }}
                  PDF_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_PDF_SERVICE }}
                  PRODUCT_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_PRODUCT_SERVICE }}
                  QUOTE_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_QUOTE_SERVICE }}
                  STRIPE_SERVICE_WEBHOOK: ${{ secrets.COOLIFY_WEBHOOK_STRIPE_SERVICE }}
              run: |
                  SERVICE_UPPER=$(echo "${{ matrix.service }}" | tr '[:lower:]' '[:upper:]')
                  WEBHOOK_VAR="${SERVICE_UPPER}_WEBHOOK"
                  WEBHOOK_URL=$(eval echo \$${WEBHOOK_VAR})

                  if [ -z "$WEBHOOK_URL" ]; then
                    echo "‚ùå Aucun webhook trouv√© pour ${{ matrix.service }}"
                    exit 1
                  fi

                  echo "üöÄ D√©ploiement de ${{ matrix.service }}"
                  curl -X POST "$WEBHOOK_URL"
