name: Deploy to Coolify

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/**'
  workflow_dispatch:
    inputs:
      services:
        description: 'Services √† d√©ployer (s√©par√©s par des virgules, ou "all")'
        required: false
        default: 'all'
      environment:
        description: 'Environnement cible'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/zenbilling

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
      matrix: ${{ steps.changes.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changed services
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ "${{ github.event.inputs.services }}" == "all" ]; then
              services='["api_gateway","auth_service","company_service","customer_service","dashboard_service","email_service","invoice_service","pdf_service","product_service","quote_service","stripe_service","ai_service"]'
            else
              IFS=',' read -ra ADDR <<< "${{ github.event.inputs.services }}"
              services='['
              for service in "${ADDR[@]}"; do
                services+='"'$(echo $service | xargs)'", '
              done
              services=$(echo $services | sed 's/, $//')']'
            fi
          else
            services='[]'
            all_services=("api_gateway" "auth_service" "company_service" "customer_service" "dashboard_service" "email_service" "invoice_service" "pdf_service" "product_service" "quote_service" "stripe_service" "ai_service")
            
            for service in "${all_services[@]}"; do
              if git diff --name-only HEAD~1 HEAD | grep -q "packages/$service/"; then
                if [ "$services" == "[]" ]; then
                  services='["'$service'"'
                else
                  services=$(echo $services | sed 's/]$/, "'$service'"]/')
                fi
              fi
            done
            
            # Si package shared modifi√©, d√©ployer tous les services
            if [ "$services" == "[]" ] && git diff --name-only HEAD~1 HEAD | grep -q "packages/shared/"; then
              services='["api_gateway","auth_service","company_service","customer_service","dashboard_service","email_service","invoice_service","pdf_service","product_service","quote_service","stripe_service","ai_service"]'
            fi
          fi
          
          echo "services=$services" >> $GITHUB_OUTPUT
          
          # Cr√©er la matrice
          if [ "$services" != "[]" ]; then
            matrix='{"service":'$services'}'
          else
            matrix='{"service":[]}'
          fi
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
          
          echo "Services √† d√©ployer: $services"

  deploy:
    needs: detect-changes
    if: needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.detect-changes.outputs.matrix)}}
      fail-fast: false
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./packages/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Deploy to Coolify (Staging)
        if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
        env:
          COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
          COOLIFY_URL: ${{ secrets.COOLIFY_URL }}
          SERVICE_NAME: zenbilling-${{ matrix.service }}
        run: |
          echo "üöÄ D√©ploiement de ${{ matrix.service }} en staging"
          curl -X POST \
            -H "Authorization: Bearer $COOLIFY_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ github.ref_name }}-${{ github.sha }}",
              "force": true
            }' \
            "$COOLIFY_URL/api/v1/applications/$SERVICE_NAME/deploy"

      - name: Deploy to Coolify (Production)
        if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
        env:
          COOLIFY_TOKEN: ${{ secrets.COOLIFY_PROD_TOKEN }}
          COOLIFY_URL: ${{ secrets.COOLIFY_PROD_URL }}
          SERVICE_NAME: zenbilling-${{ matrix.service }}-prod
        run: |
          echo "üöÄ D√©ploiement de ${{ matrix.service }} en production"
          curl -X POST \
            -H "Authorization: Bearer $COOLIFY_TOKEN" \
            -H "Content-Type: application/json" \
            -d '{
              "image": "${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:latest",
              "force": true
            }' \
            "$COOLIFY_URL/api/v1/applications/$SERVICE_NAME/deploy"

  notify:
    needs: [detect-changes, deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "‚úÖ D√©ploiement r√©ussi"
          echo "Services: ${{ needs.detect-changes.outputs.services }}"
          
      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå √âchec du d√©ploiement"
          exit 1