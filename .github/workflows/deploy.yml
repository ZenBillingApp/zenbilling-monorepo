name: Deploy to Coolify

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed
    branches: [main]
  
  # Déploiement manuel
  workflow_dispatch:
    inputs:
      services:
        description: 'Services à déployer (séparés par des virgules, ou "all" pour tous)'
        required: true
        default: 'all'
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    strategy:
      matrix:
        service: 
          - api_gateway
          - auth_service
          - ai_service
          - company_service
          - customer_service
          - dashboard_service
          - email_service
          - invoice_service
          - pdf_service
          - product_service
          - quote_service
          - stripe_service
      max-parallel: 3  # Éviter de surcharger Coolify
    
    steps:
      - name: Check if service should be deployed
        id: should_deploy
        run: |
          SERVICE="${{ matrix.service }}"
          SERVICES_INPUT="${{ github.event.inputs.services || 'all' }}"
          
          if [[ "$SERVICES_INPUT" == "all" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "$SERVICES_INPUT" == *"$SERVICE"* ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Deploy ${{ matrix.service }} to Coolify
        if: steps.should_deploy.outputs.deploy == 'true'
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ secrets.COOLIFY_WEBHOOK_URL_PREFIX }}${{ matrix.service }}
          method: 'GET'
          timeout: 120000
          retry: 3
          retryWait: 30000
        continue-on-error: true
      
      - name: Verify deployment
        if: steps.should_deploy.outputs.deploy == 'true'
        run: |
          echo "Deployment webhook sent for ${{ matrix.service }}"
          echo "Check your Coolify dashboard for deployment status"
          
          # Attendre un peu avant de vérifier le service suivant
          sleep 10

  # Job pour vérifier la santé des services après déploiement
  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Wait for services to start
        run: sleep 60  # Attendre que les services démarrent
      
      - name: Health check services
        run: |
          # Variables d'environnement pour les URLs de base
          BASE_URL="${{ secrets.COOLIFY_BASE_URL || 'https://your-domain.com' }}"
          
          # Liste des services avec leurs paths de health check
          declare -A services=(
            ["api_gateway"]="/"
            ["auth_service"]="/health"
            ["ai_service"]="/health"
            ["company_service"]="/health"
            ["customer_service"]="/health"
            ["dashboard_service"]="/health"
            ["email_service"]="/health"
            ["invoice_service"]="/health"
            ["pdf_service"]="/health"
            ["product_service"]="/health"
            ["quote_service"]="/health"
            ["stripe_service"]="/health"
          )
          
          failed_services=()
          
          for service in "${!services[@]}"; do
            health_path="${services[$service]}"
            url="${BASE_URL}/api/${service}${health_path}"
            
            # Skip API Gateway car il a une URL différente
            if [[ "$service" == "api_gateway" ]]; then
              url="${BASE_URL}${health_path}"
            fi
            
            echo "Checking health for $service at $url"
            
            if curl -f -s --max-time 10 "$url" > /dev/null; then
              echo "✅ $service is healthy"
            else
              echo "❌ $service health check failed"
              failed_services+=("$service")
            fi
          done
          
          if [ ${#failed_services[@]} -gt 0 ]; then
            echo "❌ Health checks failed for: ${failed_services[*]}"
            echo "Please check your Coolify dashboard and service logs"
            exit 1
          else
            echo "✅ All services are healthy!"
          fi