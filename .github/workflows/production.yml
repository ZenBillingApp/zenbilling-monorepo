name: Production CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy all services (skip change detection)'
        required: false
        default: 'false'
        type: boolean

env:
  REGISTRY: ghcr.io
  NODE_VERSION: '20'
  TIMEOUT_MINUTES: 30

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  # 1. D√âTECTION DES CHANGEMENTS
  detect-changes:
    name: "üîç Detect Changes"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      services: ${{ steps.changes.outputs.changes }}
      shared: ${{ steps.changes.outputs.shared }}
      has_changes: ${{ steps.has-changes.outputs.result }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect file changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            shared:
              - 'packages/shared/**'
            api_gateway:
              - 'packages/api_gateway/**'
            auth_service:
              - 'packages/auth_service/**'
            ai_service:
              - 'packages/ai_service/**'
            company_service:
              - 'packages/company_service/**'
            customer_service:
              - 'packages/customer_service/**'
            dashboard_service:
              - 'packages/dashboard_service/**'
            email_service:
              - 'packages/email_service/**'
            invoice_service:
              - 'packages/invoice_service/**'
            pdf_service:
              - 'packages/pdf_service/**'
            product_service:
              - 'packages/product_service/**'
            quote_service:
              - 'packages/quote_service/**'
            stripe_service:
              - 'packages/stripe_service/**'

      - name: Check if deployment needed
        id: has-changes
        run: |
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "üöÄ Force deploy requested"
          elif [[ "${{ steps.changes.outputs.changes }}" != "[]" || "${{ steps.changes.outputs.shared }}" == "true" ]]; then
            echo "result=true" >> $GITHUB_OUTPUT
            echo "üì¶ Changes detected: ${{ steps.changes.outputs.changes }}"
          else
            echo "result=false" >> $GITHUB_OUTPUT
            echo "‚úÖ No changes detected, skipping pipeline"
          fi

  # 2. BUILD PHASE
  build:
    name: "üèóÔ∏è Build"
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_changes == 'true'
    timeout-minutes: 30
    strategy:
      fail-fast: true
      matrix:
        service: [api_gateway, auth_service, ai_service, company_service, customer_service, dashboard_service, email_service, invoice_service, pdf_service, product_service, quote_service, stripe_service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: |
          npm ci --no-audit --no-fund
          echo "üì¶ Root dependencies installed"

      - name: Build shared package
        if: needs.detect-changes.outputs.shared == 'true' || github.event.inputs.force_deploy == 'true'
        run: |
          cd packages/shared
          npm ci --no-audit --no-fund
          npm run build
          echo "‚úÖ Shared package built successfully"

      - name: Check if service needs build
        id: should-build
        run: |
          SERVICE="${{ matrix.service }}"
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force build: $SERVICE"
          elif [[ "${{ needs.detect-changes.outputs.services }}" == *"$SERVICE"* || "${{ needs.detect-changes.outputs.shared }}" == "true" ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
            echo "üì¶ Build needed: $SERVICE"
          else
            echo "build=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skip build: $SERVICE"
          fi

      - name: Build service
        if: steps.should-build.outputs.build == 'true'
        run: |
          cd packages/${{ matrix.service }}
          npm ci --no-audit --no-fund
          
          # Build si disponible
          if npm run 2>&1 | grep -q "build$"; then
            npm run build
            echo "‚úÖ ${{ matrix.service }} built successfully"
          else
            echo "‚ÑπÔ∏è  No build script for ${{ matrix.service }}"
          fi

      - name: Cache build artifacts
        if: steps.should-build.outputs.build == 'true'
        uses: actions/cache@v3
        with:
          path: |
            packages/${{ matrix.service }}/dist
            packages/${{ matrix.service }}/node_modules
            packages/shared/dist
          key: build-${{ matrix.service }}-${{ github.sha }}

  # 3. TEST PHASE
  test:
    name: "üß™ Test"
    runs-on: ubuntu-latest
    needs: [detect-changes, build]
    if: needs.detect-changes.outputs.has_changes == 'true'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        service: [api_gateway, auth_service, ai_service, company_service, customer_service, dashboard_service, email_service, invoice_service, pdf_service, product_service, quote_service, stripe_service]
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U test"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check if service needs testing
        id: should-test
        run: |
          SERVICE="${{ matrix.service }}"
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "test=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force test: $SERVICE"
          elif [[ "${{ needs.detect-changes.outputs.services }}" == *"$SERVICE"* || "${{ needs.detect-changes.outputs.shared }}" == "true" ]]; then
            echo "test=true" >> $GITHUB_OUTPUT
            echo "üß™ Test needed: $SERVICE"
          else
            echo "test=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skip test: $SERVICE"
          fi

      - name: Restore build cache
        if: steps.should-test.outputs.test == 'true'
        uses: actions/cache@v3
        with:
          path: |
            packages/${{ matrix.service }}/dist
            packages/${{ matrix.service }}/node_modules
            packages/shared/dist
          key: build-${{ matrix.service }}-${{ github.sha }}

      - name: Install dependencies if cache miss
        if: steps.should-test.outputs.test == 'true'
        run: |
          # Install shared
          cd packages/shared
          if [ ! -d "node_modules" ]; then
            npm ci --no-audit --no-fund
            npm run build
          fi
          cd ../..
          
          # Install service
          cd packages/${{ matrix.service }}
          if [ ! -d "node_modules" ]; then
            npm ci --no-audit --no-fund
          fi

      - name: Run tests
        if: steps.should-test.outputs.test == 'true'
        run: |
          cd packages/${{ matrix.service }}
          if npm run --silent | grep -q "^  test$"; then
            npm test
            echo "‚úÖ Tests passed for ${{ matrix.service }}"
          else
            echo "‚ÑπÔ∏è  No tests for ${{ matrix.service }}"
          fi
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test:test@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379

  # 4. SECURITY SCAN
  security:
    name: "üîí Security Scan"
    runs-on: ubuntu-latest
    needs: [detect-changes, test]
    if: needs.detect-changes.outputs.has_changes == 'true'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund

      - name: Run security audit
        run: |
          npm audit --audit-level=high
          echo "üîí Security audit completed"

      - name: Check for secrets
        run: |
          # V√©rifie qu'aucun secret n'est commit√©
          if grep -r -E "(STRIPE_SECRET_KEY|OPENAI_API_KEY|DATABASE_URL|BETTER_AUTH_SECRET)" --include="*.ts" --include="*.js" --exclude-dir=node_modules packages/; then
            echo "‚ùå Secrets found in code!"
            exit 1
          fi
          echo "‚úÖ No secrets found in code"

  # 5. BUILD & PUSH DOCKER IMAGES
  push:
    name: "üê≥ Push Images"
    runs-on: ubuntu-latest
    needs: [detect-changes, build, test, security]
    if: needs.detect-changes.outputs.has_changes == 'true' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    strategy:
      fail-fast: true
      max-parallel: 4
      matrix:
        service: [api_gateway, auth_service, ai_service, company_service, customer_service, dashboard_service, email_service, invoice_service, pdf_service, product_service, quote_service, stripe_service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Check if service needs push
        id: should-push
        run: |
          SERVICE="${{ matrix.service }}"
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "push=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force push: $SERVICE"
          elif [[ "${{ needs.detect-changes.outputs.services }}" == *"$SERVICE"* || "${{ needs.detect-changes.outputs.shared }}" == "true" ]]; then
            echo "push=true" >> $GITHUB_OUTPUT
            echo "üê≥ Push needed: $SERVICE"
          else
            echo "push=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skip push: $SERVICE"
          fi

      - name: Restore build cache
        if: steps.should-push.outputs.push == 'true'
        uses: actions/cache@v3
        with:
          path: |
            packages/${{ matrix.service }}/dist
            packages/${{ matrix.service }}/node_modules
            packages/shared/dist
          key: build-${{ matrix.service }}-${{ github.sha }}

      - name: Rebuild if cache miss
        if: steps.should-push.outputs.push == 'true'
        run: |
          # Rebuild shared if needed
          cd packages/shared
          if [ ! -d "dist" ]; then
            npm ci --no-audit --no-fund
            npm run build
          fi
          cd ../..
          
          # Rebuild service if needed
          cd packages/${{ matrix.service }}
          if [ ! -d "node_modules" ]; then
            npm ci --no-audit --no-fund
          fi
          if [ ! -d "dist" ] && npm run 2>&1 | grep -q "build$"; then
            npm run build
          fi

      - name: Set up Docker Buildx
        if: steps.should-push.outputs.push == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: steps.should-push.outputs.push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        if: steps.should-push.outputs.push == 'true'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/zenbillingapp/zenbilling-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        if: steps.should-push.outputs.push == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  # 6. DEPLOY TO COOLIFY
  deploy:
    name: "üöÄ Deploy"
    runs-on: ubuntu-latest
    needs: [detect-changes, push]
    if: needs.detect-changes.outputs.has_changes == 'true' && github.ref == 'refs/heads/main'
    timeout-minutes: 30
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        service: [api_gateway, auth_service, ai_service, company_service, customer_service, dashboard_service, email_service, invoice_service, pdf_service, product_service, quote_service, stripe_service]

    steps:
      - name: Check if service needs deploy
        id: should-deploy
        run: |
          SERVICE="${{ matrix.service }}"
          if [[ "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "üîÑ Force deploy: $SERVICE"
          elif [[ "${{ needs.detect-changes.outputs.services }}" == *"$SERVICE"* || "${{ needs.detect-changes.outputs.shared }}" == "true" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
            echo "üöÄ Deploy needed: $SERVICE"
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skip deploy: $SERVICE"
          fi

      - name: Deploy to Coolify
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          SERVICE_UPPER=$(echo "${{ matrix.service }}" | tr '[:lower:]' '[:upper:]')
          WEBHOOK_VAR="COOLIFY_WEBHOOK_${SERVICE_UPPER}"
          WEBHOOK_URL="${!WEBHOOK_VAR}"
          
          if [ -z "$WEBHOOK_URL" ]; then
            echo "‚ùå Webhook URL not found for ${{ matrix.service }}"
            exit 1
          fi
          
          echo "üöÄ Deploying ${{ matrix.service }} to Coolify..."
          
          for i in {1..3}; do
            if curl -f -s --max-time 180 "$WEBHOOK_URL"; then
              echo "‚úÖ Deployment webhook sent successfully for ${{ matrix.service }}"
              break
            else
              echo "‚ùå Deployment attempt $i failed for ${{ matrix.service }}"
              if [ $i -eq 3 ]; then
                exit 1
              fi
              sleep 30
            fi
          done
        env:
          COOLIFY_WEBHOOK_API_GATEWAY: ${{ secrets.COOLIFY_WEBHOOK_API_GATEWAY }}
          COOLIFY_WEBHOOK_AUTH_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_AUTH_SERVICE }}
          COOLIFY_WEBHOOK_AI_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_AI_SERVICE }}
          COOLIFY_WEBHOOK_COMPANY_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_COMPANY_SERVICE }}
          COOLIFY_WEBHOOK_CUSTOMER_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_CUSTOMER_SERVICE }}
          COOLIFY_WEBHOOK_DASHBOARD_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_DASHBOARD_SERVICE }}
          COOLIFY_WEBHOOK_EMAIL_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_EMAIL_SERVICE }}
          COOLIFY_WEBHOOK_INVOICE_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_INVOICE_SERVICE }}
          COOLIFY_WEBHOOK_PDF_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_PDF_SERVICE }}
          COOLIFY_WEBHOOK_PRODUCT_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_PRODUCT_SERVICE }}
          COOLIFY_WEBHOOK_QUOTE_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_QUOTE_SERVICE }}
          COOLIFY_WEBHOOK_STRIPE_SERVICE: ${{ secrets.COOLIFY_WEBHOOK_STRIPE_SERVICE }}

      - name: Wait for deployment
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          echo "‚è≥ Waiting for ${{ matrix.service }} deployment..."
          sleep 30

  # 7. HEALTH CHECK
  health-check:
    name: "üè• Health Check"
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: needs.detect-changes.outputs.has_changes == 'true' && github.ref == 'refs/heads/main'
    timeout-minutes: 10

    steps:
      - name: Wait for services startup
        run: |
          echo "‚è≥ Waiting for all services to start..."
          sleep 60

      - name: Health check services
        run: |
          BASE_URL="${{ secrets.COOLIFY_BASE_URL }}"
          if [[ -z "$BASE_URL" ]]; then
            echo "‚ùå COOLIFY_BASE_URL secret not configured"
            exit 1
          fi

          failed_services=()
          
          # Health check pour chaque service
          services="auth_service ai_service company_service customer_service dashboard_service email_service invoice_service pdf_service product_service quote_service stripe_service"
          
          for service in $services; do
            url="$BASE_URL/api/$service/health"
            echo "üîç Checking $service at $url"
            
            if curl -f -s --max-time 10 "$url" > /dev/null; then
              echo "‚úÖ $service is healthy"
            else
              echo "‚ùå $service health check failed"
              failed_services+=("$service")
            fi
          done

          # Check API Gateway
          echo "üîç Checking API Gateway at $BASE_URL/"
          if curl -f -s --max-time 10 "$BASE_URL/" > /dev/null; then
            echo "‚úÖ API Gateway is healthy"
          else
            echo "‚ùå API Gateway health check failed"
            failed_services+=("api_gateway")
          fi

          if [ ${#failed_services[@]} -gt 0 ]; then
            echo "‚ùå Health checks failed for: ${failed_services[*]}"
            exit 1
          else
            echo "üéâ All services are healthy!"
          fi

  # 8. CLEANUP
  cleanup:
    name: "üßπ Cleanup"
    runs-on: ubuntu-latest
    needs: [detect-changes, health-check]
    if: always() && needs.detect-changes.outputs.has_changes == 'true'
    
    steps:
      - name: Clean up old images
        run: |
          echo "üßπ Cleanup completed (placeholder for future image cleanup)"
          
      - name: Report deployment status
        run: |
          if [[ "${{ needs.health-check.result }}" == "success" ]]; then
            echo "üéâ Deployment completed successfully!"
          else
            echo "‚ùå Deployment failed or health checks failed"
          fi